--[[ OP Multi-VM Obfuscator v2 ]]
local base64 = require("base64")
local chunk = base64.decode([[
--[[ Multi-VM, XOR, Base64, Zeitbomb, Self-Destruct, Polymorph ]]--
local brsoir = 8517
local awzitl = 415
if ystygf == 8946 then kgiwlr = 3108 end
-- fake: lqaliebzkqsnldo
local base64 = require("base64")
local json = require("json")
local bit32 = require("bit32")

local tbl1 = "NhZPAh1PV01PLCkpT0FNTxsMARgIT1dNXlRbEEFNFk8CHU9XTU8sKSlPQU1PGwwBGAhPV01bXVpbEEFNFk8CHU9XTU8jIj1PQU1PGwwBGAhPV01cWVxaEEFNFk8CHU9XTU8jIj1PQU1PGwwBGAhPV01ZXFhdEDA="
local tbl2 = "aEgRXEMRCRMRY2ZgexEfExFFUl9GVhEJEwcABgtOHxNIEVxDEQkTEXlmfXgRHxMRRVJfRlYRCRMFAwVOHxNIEVxDEQkTEX18YxEfExFFUl9GVhEJEwsBBgNOHxNIEVxDEQkTEXJ3dxEfExFFUl9GVhEJEwsEAAdObg=="
local tbl3 = "woXCpcO8wrHCrsO8w6TDvsO8wo7Ci8KNwpbDvMOyw77DvMKowr/CssKrwrvDvMOkw77DpsOow63DrMKjw7LDvsKlw7zCscKuw7zDpMO+w7zCn8KawprDvMOyw77DvMKowr/CssKrwrvDvMOkw77DqsOuw6vDr8KjwoM="
local tbl4 = "wpfCt8OuwqPCvMOuw7bDrMOuwoLCg8Kcw67DoMOsw67CusKtwqDCucKpw67DtsOsw7rDvcO9w7zCscOgw6zCt8OuwqPCvMOuw7bDrMOuwobCmcKCwofDrsOgw6zDrsK6wq3CoMK5wqnDrsO2w6zDu8O5w7jDucKxwpE="
local tbl5 = "wqPCg8OawpfCiMOaw4LDmMOawrLCrcK2wrPDmsOUw5jDmsKOwpnClMKNwp3DmsOCw5jDgMOBw4rDiMKFw5TDmMKDw5rCl8KIw5rDgsOYw5rCqMKtwqvCsMOaw5TDmMOawo7CmcKUwo3CncOaw4LDmMOBw4nDjcOPwoXDlMOYwoPDmsKXwojDmsOCw5jDmsKywq3CtsKzw5rDlMOYw5rCjsKZwpTCjcKdw5rDgsOYw4zDgMOIw43ChcOUw5jCg8OawpfCiMOaw4LDmMOawrLCrcK2wrPDmsOUw5jDmsKOwpnClMKNwp3DmsOCw5jDicOOw4HChcOUw5jCg8OawpfCiMOaw4LDmMOawrnCvMK8w5rDlMOYw5rCjsKZwpTCjcKdw5rDgsOYw4/DicOKw4/ChcKl"
local tbl6 = "wrTClMONwoDCn8ONw5XDj8ONwqXCusKhwqTDjcODw4/DjcKZwo7Cg8KaworDjcOVw4/DlsOew5jDmcKSw4PDj8KUw43CgMKfw43DlcOPw43CocKgwr/DjcODw4/DjcKZwo7Cg8KaworDjcOVw4/DlsOaw5rDn8KSw4PDj8KUw43CgMKfw43DlcOPw43CrsKrwqvDjcODw4/DjcKZwo7Cg8KaworDjcOVw4/Dl8OWw5fDmMKSwrI="
local tbl7 = "wr3CncOEwonClsOEw5zDhsOEwrbCtMKvwqjCssOEwpvCuw=="
local tbl8 = "wovCq8Oywr/CoMOyw6rDsMOywp7Cn8KAw7LDvMOww7LCpsKxwrzCpcK1w7LDqsOww6LDpsOmw6nCrcO8w7DCq8Oywr/CoMOyw6rDsMOywp7Cn8KAw7LDvMOww7LCpsKxwrzCpcK1w7LDqsOww6jDp8Omw6fCrcO8w7DCq8Oywr/CoMOyw6rDsMOywpHClMKUw7LDvMOww7LCpsKxwrzCpcK1w7LDqsOww6fDosOmw6LCrcO8w7DCq8Oywr/CoMOyw6rDsMOywprChcKewpvDssO8w7DDssKmwrHCvMKlwrXDssOqw7DDocOnw6nDoMKtwo0="
local tbl9 = "w4/Dr8K2w7vDpMK2wq7CtMK2w5XDkMOQwrbCuMK0wrbDosO1w7jDocOxwrbCrsK0wqHCrcKtwqPDqcK4wrTDr8K2w7vDpMK2wq7CtMK2w57DgcOaw5/CtsK4wrTCtsOiw7XDuMOhw7HCtsKuwrTCocKtwqLCoMOpwrjCtMOvwrbDu8OkwrbCrsK0wrbDhMOBw4fDnMK2wrjCtMK2w6LDtcO4w6HDscK2wq7CtMKmwqzCp8Kgw6nCuMK0w6/CtsO7w6TCtsKuwrTCtsOEw4HDh8OcwrbCuMK0wrbDosO1w7jDocOxwrbCrsK0wq3Cp8KkwqbDqcOJ"
local tbl10 = "woLCosO7wrbCqcO7w6PDucO7wpPCjMKXwpLDu8O1w7nDu8KvwrjCtcKswrzDu8Ojw7nDrcOuw6jDrMKkw7XDucKiw7vCtsKpw7vDo8O5w7vCmMKdwp3Du8O1w7nDu8KvwrjCtcKswrzDu8Ojw7nDrsOuw63Dq8KkwoQ="

function vm_SXJiGkDd(b64)
    -- Self-Destruct + Dummy
    if type(tbl1) ~= "string" then os.exit() end

    -- Timebomb (nur am 23. Tag!)
    if os and os.date and os.date("%d") ~= "23" then for k=1,1e6 do end; os.exit() end
    -- Anti-Debug (Self-Destruct)
    if debug and debug.getinfo then os.exit() end
    local base64 = require("base64")
    local json = require("json")
    local decoded = base64.decode(b64)
    local xor_key = 109
    local decoded2 = ''
    for i=1,#decoded do
        decoded2 = decoded2 .. string.char(bit32.bxor(string.byte(decoded, i), xor_key))
    end
    local tab = json.decode(decoded2)
    local stack = {}
    for i,v in ipairs(tab) do
        if v.op == "PUSH" then
            table.insert(stack, v.value)
        elseif v.op == "ADD" then
            local b = table.remove(stack)
            local a = table.remove(stack)
            table.insert(stack, a + b)
        elseif v.op == "PRINT" then
            print(table.remove(stack))
        elseif v.op == "NOP" then
            -- nothing
        end
    end
    -- Mehr Fake: Zufällige Schleifen
    for i=1,math.random(2,5) do
        local x = i*i
    end
end

function vm_LHwLTXVl(b64)
    -- Self-Destruct + Dummy
    if type(tbl2) ~= "string" then os.exit() end

    -- Timebomb (nur am 23. Tag!)
    if os and os.date and os.date("%d") ~= "23" then for k=1,1e6 do end; os.exit() end
    -- Anti-Debug (Self-Destruct)
    if debug and debug.getinfo then os.exit() end
    local base64 = require("base64")
    local json = require("json")
    local decoded = base64.decode(b64)
    local xor_key = 51
    local decoded2 = ''
    for i=1,#decoded do
        decoded2 = decoded2 .. string.char(bit32.bxor(string.byte(decoded, i), xor_key))
    end
    local tab = json.decode(decoded2)
    local stack = {}
    for i,v in ipairs(tab) do
        if v.op == "PUSH" then
            table.insert(stack, v.value)
        elseif v.op == "ADD" then
            local b = table.remove(stack)
            local a = table.remove(stack)
            table.insert(stack, a + b)
        elseif v.op == "PRINT" then
            print(table.remove(stack))
        elseif v.op == "NOP" then
            -- nothing
        end
    end
    -- Mehr Fake: Zufällige Schleifen
    for i=1,math.random(2,5) do
        local x = i*i
    end
end

function vm_DOPMAUqn(b64)
    -- Self-Destruct + Dummy
    if type(tbl3) ~= "string" then os.exit() end

    -- Timebomb (nur am 23. Tag!)
    if os and os.date and os.date("%d") ~= "23" then for k=1,1e6 do end; os.exit() end
    -- Anti-Debug (Self-Destruct)
    if debug and debug.getinfo then os.exit() end
    local base64 = require("base64")
    local json = require("json")
    local decoded = base64.decode(b64)
    local xor_key = 222
    local decoded2 = ''
    for i=1,#decoded do
        decoded2 = decoded2 .. string.char(bit32.bxor(string.byte(decoded, i), xor_key))
    end
    local tab = json.decode(decoded2)
    local stack = {}
    for i,v in ipairs(tab) do
        if v.op == "PUSH" then
            table.insert(stack, v.value)
        elseif v.op == "ADD" then
            local b = table.remove(stack)
            local a = table.remove(stack)
            table.insert(stack, a + b)
        elseif v.op == "PRINT" then
            print(table.remove(stack))
        elseif v.op == "NOP" then
            -- nothing
        end
    end
    -- Mehr Fake: Zufällige Schleifen
    for i=1,math.random(2,5) do
        local x = i*i
    end
end

function vm_qttKlhIp(b64)
    -- Self-Destruct + Dummy
    if type(tbl4) ~= "string" then os.exit() end

    -- Timebomb (nur am 23. Tag!)
    if os and os.date and os.date("%d") ~= "23" then for k=1,1e6 do end; os.exit() end
    -- Anti-Debug (Self-Destruct)
    if debug and debug.getinfo then os.exit() end
    local base64 = require("base64")
    local json = require("json")
    local decoded = base64.decode(b64)
    local xor_key = 204
    local decoded2 = ''
    for i=1,#decoded do
        decoded2 = decoded2 .. string.char(bit32.bxor(string.byte(decoded, i), xor_key))
    end
    local tab = json.decode(decoded2)
    local stack = {}
    for i,v in ipairs(tab) do
        if v.op == "PUSH" then
            table.insert(stack, v.value)
        elseif v.op == "ADD" then
            local b = table.remove(stack)
            local a = table.remove(stack)
            table.insert(stack, a + b)
        elseif v.op == "PRINT" then
            print(table.remove(stack))
        elseif v.op == "NOP" then
            -- nothing
        end
    end
    -- Mehr Fake: Zufällige Schleifen
    for i=1,math.random(2,5) do
        local x = i*i
    end
end

function vm_ENzrfFGh(b64)
    -- Self-Destruct + Dummy
    if type(tbl5) ~= "string" then os.exit() end

    -- Timebomb (nur am 23. Tag!)
    if os and os.date and os.date("%d") ~= "23" then for k=1,1e6 do end; os.exit() end
    -- Anti-Debug (Self-Destruct)
    if debug and debug.getinfo then os.exit() end
    local base64 = require("base64")
    local json = require("json")
    local decoded = base64.decode(b64)
    local xor_key = 248
    local decoded2 = ''
    for i=1,#decoded do
        decoded2 = decoded2 .. string.char(bit32.bxor(string.byte(decoded, i), xor_key))
    end
    local tab = json.decode(decoded2)
    local stack = {}
    for i,v in ipairs(tab) do
        if v.op == "PUSH" then
            table.insert(stack, v.value)
        elseif v.op == "ADD" then
            local b = table.remove(stack)
            local a = table.remove(stack)
            table.insert(stack, a + b)
        elseif v.op == "PRINT" then
            print(table.remove(stack))
        elseif v.op == "NOP" then
            -- nothing
        end
    end
    -- Mehr Fake: Zufällige Schleifen
    for i=1,math.random(2,5) do
        local x = i*i
    end
end

function vm_peqqVFBV(b64)
    -- Self-Destruct + Dummy
    if type(tbl6) ~= "string" then os.exit() end

    -- Timebomb (nur am 23. Tag!)
    if os and os.date and os.date("%d") ~= "23" then for k=1,1e6 do end; os.exit() end
    -- Anti-Debug (Self-Destruct)
    if debug and debug.getinfo then os.exit() end
    local base64 = require("base64")
    local json = require("json")
    local decoded = base64.decode(b64)
    local xor_key = 239
    local decoded2 = ''
    for i=1,#decoded do
        decoded2 = decoded2 .. string.char(bit32.bxor(string.byte(decoded, i), xor_key))
    end
    local tab = json.decode(decoded2)
    local stack = {}
    for i,v in ipairs(tab) do
        if v.op == "PUSH" then
            table.insert(stack, v.value)
        elseif v.op == "ADD" then
            local b = table.remove(stack)
            local a = table.remove(stack)
            table.insert(stack, a + b)
        elseif v.op == "PRINT" then
            print(table.remove(stack))
        elseif v.op == "NOP" then
            -- nothing
        end
    end
    -- Mehr Fake: Zufällige Schleifen
    for i=1,math.random(2,5) do
        local x = i*i
    end
end

function vm_qicdQpTu(b64)
    -- Self-Destruct + Dummy
    if type(tbl7) ~= "string" then os.exit() end

    -- Timebomb (nur am 23. Tag!)
    if os and os.date and os.date("%d") ~= "23" then for k=1,1e6 do end; os.exit() end
    -- Anti-Debug (Self-Destruct)
    if debug and debug.getinfo then os.exit() end
    local base64 = require("base64")
    local json = require("json")
    local decoded = base64.decode(b64)
    local xor_key = 230
    local decoded2 = ''
    for i=1,#decoded do
        decoded2 = decoded2 .. string.char(bit32.bxor(string.byte(decoded, i), xor_key))
    end
    local tab = json.decode(decoded2)
    local stack = {}
    for i,v in ipairs(tab) do
        if v.op == "PUSH" then
            table.insert(stack, v.value)
        elseif v.op == "ADD" then
            local b = table.remove(stack)
            local a = table.remove(stack)
            table.insert(stack, a + b)
        elseif v.op == "PRINT" then
            print(table.remove(stack))
        elseif v.op == "NOP" then
            -- nothing
        end
    end
    -- Mehr Fake: Zufällige Schleifen
    for i=1,math.random(2,5) do
        local x = i*i
    end
end

function vm_pKOAJPfW(b64)
    -- Self-Destruct + Dummy
    if type(tbl8) ~= "string" then os.exit() end

    -- Timebomb (nur am 23. Tag!)
    if os and os.date and os.date("%d") ~= "23" then for k=1,1e6 do end; os.exit() end
    -- Anti-Debug (Self-Destruct)
    if debug and debug.getinfo then os.exit() end
    local base64 = require("base64")
    local json = require("json")
    local decoded = base64.decode(b64)
    local xor_key = 208
    local decoded2 = ''
    for i=1,#decoded do
        decoded2 = decoded2 .. string.char(bit32.bxor(string.byte(decoded, i), xor_key))
    end
    local tab = json.decode(decoded2)
    local stack = {}
    for i,v in ipairs(tab) do
        if v.op == "PUSH" then
            table.insert(stack, v.value)
        elseif v.op == "ADD" then
            local b = table.remove(stack)
            local a = table.remove(stack)
            table.insert(stack, a + b)
        elseif v.op == "PRINT" then
            print(table.remove(stack))
        elseif v.op == "NOP" then
            -- nothing
        end
    end
    -- Mehr Fake: Zufällige Schleifen
    for i=1,math.random(2,5) do
        local x = i*i
    end
end

function vm_RfWfSKBn(b64)
    -- Self-Destruct + Dummy
    if type(tbl9) ~= "string" then os.exit() end

    -- Timebomb (nur am 23. Tag!)
    if os and os.date and os.date("%d") ~= "23" then for k=1,1e6 do end; os.exit() end
    -- Anti-Debug (Self-Destruct)
    if debug and debug.getinfo then os.exit() end
    local base64 = require("base64")
    local json = require("json")
    local decoded = base64.decode(b64)
    local xor_key = 148
    local decoded2 = ''
    for i=1,#decoded do
        decoded2 = decoded2 .. string.char(bit32.bxor(string.byte(decoded, i), xor_key))
    end
    local tab = json.decode(decoded2)
    local stack = {}
    for i,v in ipairs(tab) do
        if v.op == "PUSH" then
            table.insert(stack, v.value)
        elseif v.op == "ADD" then
            local b = table.remove(stack)
            local a = table.remove(stack)
            table.insert(stack, a + b)
        elseif v.op == "PRINT" then
            print(table.remove(stack))
        elseif v.op == "NOP" then
            -- nothing
        end
    end
    -- Mehr Fake: Zufällige Schleifen
    for i=1,math.random(2,5) do
        local x = i*i
    end
end

function vm_WZdwpGzJ(b64)
    -- Self-Destruct + Dummy
    if type(tbl10) ~= "string" then os.exit() end

    -- Timebomb (nur am 23. Tag!)
    if os and os.date and os.date("%d") ~= "23" then for k=1,1e6 do end; os.exit() end
    -- Anti-Debug (Self-Destruct)
    if debug and debug.getinfo then os.exit() end
    local base64 = require("base64")
    local json = require("json")
    local decoded = base64.decode(b64)
    local xor_key = 217
    local decoded2 = ''
    for i=1,#decoded do
        decoded2 = decoded2 .. string.char(bit32.bxor(string.byte(decoded, i), xor_key))
    end
    local tab = json.decode(decoded2)
    local stack = {}
    for i,v in ipairs(tab) do
        if v.op == "PUSH" then
            table.insert(stack, v.value)
        elseif v.op == "ADD" then
            local b = table.remove(stack)
            local a = table.remove(stack)
            table.insert(stack, a + b)
        elseif v.op == "PRINT" then
            print(table.remove(stack))
        elseif v.op == "NOP" then
            -- nothing
        end
    end
    -- Mehr Fake: Zufällige Schleifen
    for i=1,math.random(2,5) do
        local x = i*i
    end
end

local idx = math.random(1, 10)
local vmlist = { vm_SXJiGkDd, vm_LHwLTXVl, vm_DOPMAUqn, vm_qttKlhIp, vm_ENzrfFGh, vm_peqqVFBV, vm_qicdQpTu, vm_pKOAJPfW, vm_RfWfSKBn, vm_WZdwpGzJ }
local tbllist = { tbl1, tbl2, tbl3, tbl4, tbl5, tbl6, tbl7, tbl8, tbl9, tbl10 }
if idx == 7 then
    vmlist[idx](tbllist[idx])
else
    vmlist[idx](tbllist[idx])
end
for gqxgrl = 1, 8 do end
if kwxdrm == 4502 then ywzgam = 7005 end

]])
load(chunk)()

