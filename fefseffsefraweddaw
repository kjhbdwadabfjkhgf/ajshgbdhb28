---------------------------------------------------------------------
-- Services & Basics
---------------------------------------------------------------------
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")

local LP         = Players.LocalPlayer
local PLACE_ID   = game.PlaceId
local CURRENT_ID = game.JobId

-- Settings
local HOP_INTERVAL = 30
local PLAYER_CAP   = 20
local MAX_PER_PAGE = 100
local MAX_PAGES    = 4

-- State (wird nach jedem Reexec frisch gesetzt)
local AUTO_HOP_ENABLED = true
local killedOnce = false
local hopping    = false
local recentJobIds = { [CURRENT_ID] = true }

---------------------------------------------------------------------
-- Auto-Reexec nach Teleport (DEIN Loadstring)
---------------------------------------------------------------------
local function queueReexec()
    local q = (syn and syn.queue_on_teleport)
           or (queue_on_teleport)
           or (fluxus and fluxus.queue_on_teleport)
           or (KRNL_LOADED and queue_on_teleport)
    if q then
        q([[
            loadstring(game:HttpGet("https://raw.githubusercontent.com/kjhbdwadabfjkhgf/ajshgbdhb28/main/fefseffsefraweddaw"))()
        ]])
    else
        warn("[Hopper] Kein queue_on_teleport im Executor gefunden.")
    end
end

-- Teleport-Fehler → nicht hängen bleiben
TeleportService.TeleportInitFailed:Connect(function(_, result, msg)
    warn("[Hopper] TeleportInitFailed:", tostring(result), msg or "")
    hopping = false
end)

-- Backup-Reset nach Respawn (bei Reexec ohnehin frisch)
LP.CharacterAdded:Connect(function()
    killedOnce = false
    hopping = false
end)

---------------------------------------------------------------------
-- UI Switch (immer TRUE halten)
---------------------------------------------------------------------
local setSwitch
local sw = killTab:AddSwitch("Auto Hop (Best <20)", function(v)
    -- Optisch darf getoggelt werden, Logik bleibt an
    AUTO_HOP_ENABLED = true
    if setSwitch then pcall(function() setSwitch(true) end) end
end)
if sw then
    if sw.Set then setSwitch = function(v) sw:Set(v) end
    elseif sw.SetState then setSwitch = function(v) sw:SetState(v) end
    elseif sw.SetValue then setSwitch = function(v) sw:SetValue(v) end
    end
    pcall(function() if setSwitch then setSwitch(true) end end)
end
task.spawn(function()
    while task.wait(2) do
        AUTO_HOP_ENABLED = true
        if setSwitch then pcall(function() setSwitch(true) end) end
    end
end)

---------------------------------------------------------------------
-- HTTP-Implementierung (Exploit-Request oder HttpService)
---------------------------------------------------------------------
local requestImpl
do
    local exploitReq = rawget(getfenv(), "http_request")
                    or rawget(getfenv(), "request")
                    or (syn and syn.request)
    if exploitReq then
        requestImpl = function(url)
            local res = exploitReq({Url = url, Method = "GET"})
            if res and res.StatusCode and res.StatusCode >= 200 and res.StatusCode < 300 then
                return true, res.Body
            end
            return false, "HTTP error"
        end
    else
        requestImpl = function(url)
            local ok, body = pcall(function() return HttpService:GetAsync(url, false) end)
            return ok, body
        end
    end
end

---------------------------------------------------------------------
-- Beste Serverwahl: vollster Server mit < PLAYER_CAP Spielern
---------------------------------------------------------------------
local function getBestServerUnderCap()
    local best, cursor, pages = nil, nil, 0
    repeat
        local url = ("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=%d%s")
            :format(PLACE_ID, MAX_PER_PAGE, cursor and ("&cursor=" .. HttpService:UrlEncode(cursor)) or "")
        local ok, body = requestImpl(url)
        if not ok then break end

        local data; local okDec = pcall(function() data = HttpService:JSONDecode(body) end)
        if not okDec or not data or not data.data then break end

        for _, srv in ipairs(data.data) do
            local playing = tonumber(srv.playing) or 0
            local cap     = tonumber(srv.maxPlayers) or 0
            local open    = cap - playing
            if playing < PLAYER_CAP and open > 0 and not recentJobIds[srv.id] then
                if (not best) or (playing > best.playing) then
                    best = { id = srv.id, playing = playing, cap = cap }
                end
            end
        end

        cursor = data.nextPageCursor
        pages  = pages + 1  -- wichtig: kein += in Lua
    until not cursor or pages >= MAX_PAGES or best

    return best
end

---------------------------------------------------------------------
-- Hop-Funktion (queued Reexec vor JEDEM Teleport)
---------------------------------------------------------------------
local function hop(reason)
    if hopping or not AUTO_HOP_ENABLED then return end
    hopping = true

    local target = getBestServerUnderCap()
    if not target then
        warn("[Hopper] Kein passender Server gefunden ("..tostring(reason).."). Fallback: normaler Teleport.")
        pcall(function() TeleportService:SetTeleportSetting("ServerHopperReason", reason) end)
        queueReexec()
        TeleportService:Teleport(PLACE_ID, LP)
        return
    end

    recentJobIds[target.id] = true
    pcall(function() TeleportService:SetTeleportSetting("ServerHopperReason", reason) end)
    queueReexec()
    TeleportService:TeleportToPlaceInstance(PLACE_ID, target.id, LP)
end

---------------------------------------------------------------------
-- Death-Hop (beim ersten Tod)
---------------------------------------------------------------------
local function bindDeathHop(character)
    local hum = character:FindFirstChildOfClass("Humanoid")
    local function onDied()
        if not killedOnce then
            killedOnce = true
            hop("death")
        end
    end
    if hum then
        hum.Died:Connect(onDied)
    else
        character.ChildAdded:Connect(function(ch)
            if ch:IsA("Humanoid") and not killedOnce then
                ch.Died:Connect(onDied)
            end
        end)
    end
end
if LP.Character then bindDeathHop(LP.Character) end
LP.CharacterAdded:Connect(bindDeathHop)

---------------------------------------------------------------------
-- 30s-Timer (endlos)
---------------------------------------------------------------------
task.spawn(function()
    while true do
        task.wait(HOP_INTERVAL)
        if not hopping then hop("timer") end
    end
end)
