local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/obeseinsect/roblox/main/Ui%20Libraries/Elerium.lua"))()
local Window = library:AddWindow("Elerium Dex", {
    main_color = Color3.fromRGB(40, 40, 60),
    min_size = Vector2.new(700, 600),
    toggle_key = Enum.KeyCode.RightShift,
    can_resize = true,
})

local explorerTab = Window:AddTab("Explorer")
explorerTab:Clear()

-- Speichert geöffnete Nodes, damit wir wissen, wo auf-/zugeklappt ist
local openNodes = {}

-- Hauptfunktion: Listet nur Children einer Instanz, mit Aufklapp-Button
local function renderTree(parentTab, parentObj, depth)
    local indent = string.rep("   ", depth)
    local btnText = (openNodes[parentObj] and "▼ " or "► ")..indent..parentObj.Name.." ["..parentObj.ClassName.."]"
    local btn = parentTab:AddButton(btnText, function()
        -- Toggle open/close
        openNodes[parentObj] = not openNodes[parentObj]
        explorerTab:Clear()
        renderTree(explorerTab, game, 0)
    end)
    -- Wenn offen: Zeige Children als weitere Buttons
    if openNodes[parentObj] then
        for _,child in ipairs(parentObj:GetChildren()) do
            renderTree(parentTab, child, depth+1)
        end
    end
    -- Bei Klick auf Objekt (nicht nur auf Pfeil), zeige Properties (wie vorher)
    btn.MouseButton2Click:Connect(function()
        local propTab = Window:AddTab("Properties")
        propTab:Clear()
        propTab:AddLabel("Properties: "..parentObj.Name.." ["..parentObj.ClassName.."]")
        for _,prop in ipairs({"Name","ClassName","Parent","Archivable"}) do
            local val; pcall(function() val = parentObj[prop] end)
            propTab:AddLabel(prop..": "..tostring(val))
        end
        -- Attribute
        if parentObj.GetAttributes then
            for k,v in pairs(parentObj:GetAttributes()) do
                propTab:AddLabel("Attr "..k..": "..tostring(v))
            end
        end
    end)
end

-- Starte TreeView bei "game"
renderTree(explorerTab, game, 0)
